HB_COMP_ERR_EXIT_IN_SEQUENCE

if( pLast->wSeqCounter != pFunc->wSeqCounter )
{
         /* Attempt to LOOP from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that LOOP is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
}


hberrors.h
==============================================================

#define HB_COMP_ERR_CHECKING_ARGS               21


src/compiler/hbgenerr.c
===============================================================

const char * const hb_comp_szErrors[] =
{
   "Statement not allowed outside of procedure or function",
   "Redefinition of procedure or function '%s'",
   "Duplicate variable declaration '%s'",
   "%s declaration follows executable statement",
   "Outer codeblock variable '%s' is out of reach",
   "Invalid numeric format '.'",
   "Unterminated string '%s'",
   "Redefinition of predefined function %s as '%s'",
   "Illegal variable '%s' initializer '%s'",
   "ENDIF does not match IF",
   "ENDDO does not match WHILE",
   "ENDCASE does not match DO CASE",
   "NEXT does not match FOR",
   "ELSE does not match IF",
   "ELSEIF does not match IF",
   "Syntax error '%s'",
   "Unclosed control structure '%s'",
   "%s statement with no loop in sight",
   "Syntax error '%s' in '%s'",
   "Incomplete statement or unbalanced delimiters",
   "Incorrect number of arguments in %s %s",   // E0021

   ...
}




HB_FUNC( ROUND )
{
   PHB_ITEM pNumber = hb_param( 1, HB_IT_NUMERIC );

   if( pNumber && HB_IS_PARAM_NUM( 2 ) )
   {
      int iDec = hb_parni( 2 );

      if( iDec == 0 && HB_IS_NUMINT( pNumber ) )
         hb_retnint( hb_itemGetNInt( pNumber ) );
      else
         hb_retnlen( hb_numRound( hb_itemGetND( pNumber ), iDec ), 0, HB_MAX( iDec, 0 ) );
   }
   else
      hb_errRT_BASE_SubstR( EG_ARG, 1094, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
}



HB_FUNC( __ERRRT_SBASE )
{
   hb_errRT_BASE_SubstR( ( HB_ERRCODE ) hb_parni( 1 ),
                         ( HB_ERRCODE ) hb_parni( 2 ),
                         hb_parc( 3 ),
                         hb_parc( 4 ),
                         ( hb_pcount() > 5 && hb_parnl( 5 ) > 0 ? 1 : 0 ),
                         hb_param( 6, HB_IT_ANY ) );
}


void hb_errRT_BASE_SubstR( HB_ERRCODE errGenCode, HB_ERRCODE errSubCode, const char * szDescription, const char * szOperation, HB_ULONG ulArgCount, ... )
{
   PHB_ITEM pError;

   PHB_ITEM pArray;
   va_list va;
   HB_ULONG ulArgPos;

   pError = hb_errRT_New_Subst( ES_ERROR, HB_ERR_SS_BASE, errGenCode, errSubCode, szDescription, szOperation, 0, EF_NONE );

   /* Build the array from the passed arguments. */
   switch( ulArgCount )
   {
      case 0:
         pArray = NULL;
         break;

      case HB_ERR_ARGS_BASEPARAMS:
         pArray = hb_pcount() ? hb_arrayBaseParams() : NULL;
         break;

      case HB_ERR_ARGS_SELFPARAMS:
         pArray = hb_arraySelfParams();
         break;

      default:
         pArray = hb_itemArrayNew( ulArgCount );

         va_start( va, ulArgCount );
         for( ulArgPos = 1; ulArgPos <= ulArgCount; ulArgPos++ )
         {
            PHB_ITEM pArg = va_arg( va, PHB_ITEM );
            if( pArg )
               hb_itemArrayPut( pArray, ulArgPos, pArg );
         }
         va_end( va );
   }

   if( pArray )
   {
      /* Assign the new array to the object data item. */
      hb_errPutArgsArray( pError, pArray );

      /* Release the Array. */
      hb_itemRelease( pArray );
   }

   /* Ok, launch... */
   hb_itemReturnRelease( hb_errLaunchSubst( pError ) );
   hb_errRelease( pError );
}

HB_BOOL hb_compFunCallCheck( HB_COMP_DECL, const char * szFuncCall, int iArgs )

typedef struct
{
   const char * cFuncName;                /* function name                   */
   int          iMinParam;                /* min number of parameters needed */
   int          iMaxParam;                /* max number of parameters needed */
} HB_FUNCINFO, * PHB_FUNCINFO;




/* NOTE: THIS TABLE MUST BE SORTED ALPHABETICALLY
 */
static const HB_FUNCINFO s_stdFunc[] =
{
   { "AADD"      , 2,  2 },
   { "ABS"       , 1,  1 },
   { "ASC"       , 1,  1 },
   { "AT"        , 2,  2 },
   { "BOF"       , 0,  0 },
   { "BREAK"     , 0,  1 },
   { "BROWSE"    , 4,  4 ),  /*Browse( nTop, nLeft, nBottom, nRight ) */
   { "CDOW"      , 1,  1 },
   { "CHR"       , 1,  1 },
   { "CMONTH"    , 1,  1 },
   { "COL"       , 0,  0 },
   { "CTOD"      , 1,  1 },
   { "DATE"      , 0,  0 },
   { "DAY"       , 1,  1 },
   { "DELETED"   , 0,  0 },
   { "DEVPOS"    , 2,  2 },
   { "DOW"       , 1,  1 },
   { "DTOC"      , 1,  1 },
   { "DTOS"      , 1,  1 },
   { "EMPTY"     , 1,  1 },
   { "EOF"       , 0,  0 },
   { "EVAL"      , 1, -1 },
   { "EXP"       , 1,  1 },
   { "FCOUNT"    , 0,  0 },
   { "FIELDNAME" , 1,  1 },
   { "FILE"      , 1,  1 },
   { "FLOCK"     , 0,  0 },
   { "FOUND"     , 0,  0 },
   { "INKEY"     , 0,  2 },
   { "INT"       , 1,  1 },
   { "LASTREC"   , 0,  0 },
   { "LEFT"      , 2,  2 },
   { "LEN"       , 1,  1 },
   { "LOCK"      , 0,  0 },
   { "LOG"       , 1,  1 },
   { "LOWER"     , 1,  1 },
   { "LTRIM"     , 1,  1 },
   { "MAX"       , 2,  2 },
   { "MIN"       , 2,  2 },
   { "MONTH"     , 1,  1 },
   { "PCOL"      , 0,  0 },
   { "PCOUNT"    , 0,  0 },
   { "PROW"      , 0,  0 },
   { "QSELF"     , 0,  0 },
   { "RECCOUNT"  , 0,  0 },
   { "RECNO"     , 0,  0 },
   { "REPLICATE" , 2,  2 },
   { "RLOCK"     , 0,  0 },
   { "ROUND"     , 2,  2 },
   { "ROW"       , 0,  0 },
   { "RTRIM"     , 1,  1 },
   { "SECONDS"   , 0,  0 },
   { "SELECT"    , 0,  1 },
   { "SETPOS"    , 2,  2 },
   { "SETPOSBS"  , 0,  0 },
   { "SPACE"     , 1,  1 },
   { "SQRT"      , 1,  1 },
   { "STR"       , 1,  3 },
   { "SUBSTR"    , 2,  3 },
   { "TIME"      , 0,  0 },
   { "TRANSFORM" , 2,  2 },
   { "TRIM"      , 1,  1 },
   { "TYPE"      , 1,  1 },
   { "UPPER"     , 1,  1 },
   { "VAL"       , 1,  1 },
   { "VALTYPE"   , 1,  1 },
   { "WORD"      , 1,  1 },
   { "YEAR"      , 1,  1 }
};

#define  HB_EXPR_FUNC( proc )  PHB_EXPR proc( PHB_EXPR pSelf, HB_EXPR_MESSAGE iMessage, HB_COMP_DECL )
typedef  HB_EXPR_FUNC( ( * PHB_EXPR_FUNC ) );


... hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_CHECKING_ARGS, szFuncCall, szMsg );

... hb_compGenWarning( HB_COMP_PARAM, szMsgTable, cPrefix, iErrorCode, szParam1, szParam2 );


src/compiler/cmdcheck.c

hb_compChkParseSwitch( HB_COMP_PARAM, szSwitch, HB_TRUE )
   - using hb_compGenError



harbour.yyc

#line 407 "harbour.y" /* yacc.c:1646  */
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        if( ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE ) == 0 )
                        {
                           /* return from a function without a return value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     }

harbour.y

/* NOTE: This allows the use of Expression as a statement.
 *    The Expression is validated later in reduction phase of
 *    hb_compExprGenStatement(). With this solution we don't have to
 *    stop compilation if invalid syntax will be used.
 */
Statement  : ExecFlow CrlfStmnt
           | IfInline CrlfStmnt     { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | FunCall CrlfStmnt      { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | AliasExpr CrlfStmnt    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | ObjectMethod CrlfStmnt { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | MacroAny CrlfStmnt     { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) );
                                      else
                                         HB_COMP_EXPR_FREE( HB_COMP_ERROR_SYNTAX( $1 ) );
                                      HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                                    }
           | PareExpList CrlfStmnt  { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | ExprPreOp CrlfStmnt    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | ExprPostOp CrlfStmnt   { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | ExprOperEq CrlfStmnt   { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | ExprEqual CrlfStmnt    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | ExprAssign CrlfStmnt   { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | DoProc CrlfStmnt       { HB_COMP_EXPR_FREE( hb_compExprGenStatement( $1, HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
           | BREAK CrlfStmnt        { hb_compGenBreak( HB_COMP_PARAM ); hb_compGenPCode2( HB_P_DOSHORT, 0, HB_COMP_PARAM );
                                      HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
           | BREAK { hb_compLinePushIfInside( HB_COMP_PARAM ); } Expression Crlf
                                    {
                                       hb_compGenBreak( HB_COMP_PARAM ); HB_COMP_EXPR_FREE( hb_compExprGenPush( $3, HB_COMP_PARAM ) );
                                       hb_compGenPCode2( HB_P_DOSHORT, 1, HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE;
                                    }
           | EXIT CrlfStmnt { hb_compLoopExit( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
           | LOOP CrlfStmnt { hb_compLoopLoop( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
           | RETURN CrlfStmnt {
line 407 ===>           if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        if( ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE ) == 0 )
                        {
                           /* return from a function without a return value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     }
           | RETURN  {  hb_compLinePushIfInside( HB_COMP_PARAM ); }



complex.c
------------------------------------------------

static int hb_comp_funcStart( HB_COMP_DECL, YYSTYPE * yylval_ptr )
{
   HB_COMP_PARAM->pLex->iClose = HB_COMP_PARAM->functions.pLast->wIfCounter +
                                 HB_COMP_PARAM->functions.pLast->wForCounter +
                                 HB_COMP_PARAM->functions.pLast->wWhileCounter +
                                 HB_COMP_PARAM->functions.pLast->wCaseCounter +
                                 HB_COMP_PARAM->functions.pLast->wSwitchCounter +
                                 HB_COMP_PARAM->functions.pLast->wWithObjectCnt +
                                 HB_COMP_PARAM->functions.pLast->wSeqBegCounter +
                                 ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ? 1 : 0 );
   if( HB_COMP_PARAM->pLex->iClose > 0 )
   {
      HB_COMP_PARAM->pLex->iClose <<= 1;
      HB_COMP_PARAM->functions.pLast->wIfCounter =
      HB_COMP_PARAM->functions.pLast->wForCounter =
      HB_COMP_PARAM->functions.pLast->wWhileCounter =
      HB_COMP_PARAM->functions.pLast->wCaseCounter =
      HB_COMP_PARAM->functions.pLast->wSwitchCounter =
      HB_COMP_PARAM->functions.pLast->wWithObjectCnt =
      HB_COMP_PARAM->functions.pLast->wSeqBegCounter = 0;
      HB_COMP_PARAM->functions.pLast->wSeqCounter = 0;
#if 0
      printf( "\nEX=%d, iClose=%d => ENDERR", ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) != 0, HB_COMP_PARAM->pLex->iClose );
#endif
      return ENDERR;
   }
   yylval_ptr->iNumber = HB_COMP_PARAM->pLex->iScope;
   return HB_COMP_PARAM->pLex->iState;
}



OUT - clipper compatibility
===========================

HB_COMPAT_C53 - always on
HB_CLP_STRICT - always off
HB_CLP_UNDOC - always on


HB_ISNUM => HB_IS_PARAM_NUM


HB_MACRO_SUPPORT ?
====================
macro.y, macro.yyc

#define  HB_MACRO_SUPPORT

YACC_SOURCE := macro.y

macroa.c, macrob.c, macrolex.c, hvmall.c, macro.c, hvmall.c
#define HB_MACRO_SUPPORT

macro.c:
         case HB_SM_HARBOUR:
         /* enable/disable extended Harbour compatibility */
         case HB_SM_XBASE:
         /* enable/disable extended Xbase++ compatibility */
         case HB_SM_ARRSTR:
         /* enable/disable processing of strings as an array of bytes */
         case HB_SM_SHORTCUTS:
            /* enable/disable support for shortcut logical operators */
            hb_retl( hb_macroFlags() & flags );
            pValue = hb_param( 2, HB_IT_LOGICAL );
            if( pValue )
               hb_macroSetMacro( hb_itemGetL( pValue ), flags );
            break;

NO difference?!

macro.c:
      struMacro.mode      = HB_MODE_MACRO;
      struMacro.supported = HB_SM_SHORTCUTS | HB_SM_HARBOUR | HB_SM_ARRSTR;
      struMacro.Flags     = HB_MACRO_GEN_PUSH | HB_MACRO_GEN_REFER;
      struMacro.uiNameLen = HB_SYMBOL_NAME_LEN;
      struMacro.status    = HB_MACRO_CONT;
      struMacro.string    = pItem->item.asString.value;
      struMacro.length    = pItem->item.asString.length;



#ifndef HB_NO_DEBUG = OUT


HB_MT_VM

HB_STACK_TLS_PRELOAD ?


__cplusplus


HB_LEGACY_LEVEL4 - out